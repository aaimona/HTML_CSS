# the basic structure of HTML website:
<!DOCTYPE html> # this tag is single and therefore doesn't need to be closed by another tag
  <hmtl>
    <head>
      <title>something_written_here</title>
    </head>
    <body>
      <p>some_text_in_paragraphs_here</p>
      <p>some_text_in_paragraphs_here</p>
      <p>some_text_in_paragraphs_here</p>
      <img src = "link.jpg">
      <a href = "www.some-link.com">Click here!</a>
    </body>
  </html>

# CSS
# there are two ways of working with CSS. one way is to add CSS code between <style></style> tags, inside <head></head> section.
<!DOCTYPE html>
<html>
	<head>
		<style>
			p {
				color: purple;
			}
		</style>
		<title>Result</title>
	</head>
	<body>
		<p>Check it out! I'm purple!</p>
	</body>
</html>

# second way is to write css in a separate file and link it to html document, using <link> tag (no need to close this one).
# <link> needs three attributes: type equal to "text/css", rel equal to "stylesheet" and href equal to the address of css.
<!DOCTYPE html>
<html>
	<head>
	    <link type = "text/css" rel = "stylesheet" href = "stylesheet.css"/>
	    # since nothing is going between <link> and </link>, i open and close the tag within one pair of brackets
	    # the same goes on for <img> - <img src = "www.w.com"/>
		<title>Result</title>
	</head>
	<body>
		<p>I want to be SIZE 44 font!</p>
	</body>
</html>

# CSS syntax:
selector { # this is any html element, such as <p>, <img>, <span>, just without <>
  property: value; # e.g. color: violet; font-size: 69, font-family: cursive;
}

# "hex color palette" or "hex color picker" - google it to find color shades in hexadecimal values

# one way to apply css rule to a particular element, e.g. paragraph, one instance of header1 etc. is to enclose it in
# <div></div> tags. then, in the css file i need to write div p {my_look_here}. 
# html file
<body>
		<h1>Big Header</h1>
		<p>That is a paragraph.</p>
		<h2>A bit smaller header</h2>
		<div><p>I don't know what to write.</p></div>
	</body>
# css file
h1 {
    font-family: cursive; font-size: 40px; 
    }
p {
    color: red;
    }
h2 {
    font-size: 20px;
    }
div p {
    color: purple; 
    }

# there is a special selector that allows me to apply styling to all elements of given characteristics - * selector
* {
    border: 1px dashed #3A5FCD
    }
# it will apply a specified border to all elements of my html webpage.

# certain selectors will "override" others if they have a greater specificity value. ul li p { is more specific CSS 
# than just p {, so when CSS sees tags that are both <p> tags and happen to be inside unordered lists, it will apply the more
# specific styling (ul li p {) to the text inside the lists.

# CLASSES and IDs
# There are two selectors that are even more specific than nested selectors like the ones above: classes and IDs. 
# Classes are assigned to HTML elements with the word class and an equals sign, like so:
<div class="square"></div>
<img class="square"/>
<td class="square"></td>
Classes are identified in CSS with a dot (.), like so:
.square {
    height: 100px;
    width: 100px;
}
# This allows you to take random elements of different types and give them the same styling.

# IDs, on the other hand, are great for when you have exactly one element that should receive a certain kind of styling.
# IDs are assigned to HTML elements with the word id and an equals sign:
<div id="first"></div>
<div id="second"></div>
<p id="intro"></p>
# IDs are identified in CSS with a pound sign (#):
#first {
    height: 50px;
}

#second {
    height: 100px;
}

#intro {
    color: #FF0000;
}
# This allows you to apply style to a single instance of a selector, rather than all instances.

# PSEUDO-SELECTORS
# A pseudo-class selector is a way of accessing HTML items that aren't part of the document tree (e.g. info whether the
# link was visited or not, or even if a reader is hovering over it but hasn't clicked it yet). In case of links enclosed in
# <a></a> tags there are 3 useful pseudo selectors: a:link, a:visited and a:hover:
a:link {
    text-decoration: none;
    color: #008B45;
    }
    
a:hover {
    color: #00FF00;
    }
    
a:visited {
    color: #EE9A00;
    }
    
# another handy selector is first-child. the syntax is as follows:
p:first-child {
    color: red;
} # it means that changes will be made only to first children of all paragraphs

# i can select the nth child:
p:nth-child(2) { # i'm talking about an element that is p (paragraph) AND is nth child of its parent element
    color: red;
}

# POSITIONING THE CSS
# learning how to position html elements gives me a very fine control of what the webpage looks like.
# up to now, the html elements have been sitting on top of one another: by default, they take up the full width of the page.
# i can change all this with the first positioning property: the display property. it has four aspects:
# block: This makes the element a block box. It won't let anything sit next to it on the page! It takes up the full width,
# inline-block: This makes the element a block box, but will allow other elements to sit next to it on the same line,
# inline: This makes the element sit on the same line as another element, but without formatting it like a block. 
# tt only takes up as much width as it needs (not the whole line),
# none: this makes the element and its content disappear from the page entirely.
div {
	display: block; # or any other value mentioned above
}

# margin - how far the element is from the page border
# border - the visible line separating elements from their environment
# padding - how much space there is between the content of the element (e.g. text or image) and the border
# i can use negative values while setting those. since when i say i want left margin of 40px, i actually move the element
# to the right, negative values could be used to move the element to the left:
div {
	margin-left: -20px;
}

# absolute positioning - when an element is set to position: absolute, it's then positioned in relation to the first
# parent element it has that doesn't have position: static. if there's no such element, the element with position: absolute
# gets positioned relative to <html>.
# relative positioning tells the element to move relative to where it would have landedif it just had the default
# static positioning. if i give an element relative positioning and tell it to have a margin-top of 10px, 
# it doesn't move down ten pixels from any particular thingâ€”it moves down ten pixels from where it otherwise would have been.
# fixed positioning anchors an element to the browser window - it's like gluing the element to the screen. 
# if i scroll up and down, the fixed element stays put even as other elements scroll past.

